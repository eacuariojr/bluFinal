GAME CLASS
    Instance variables:
        string for save file name
        int daysPassed
        final int for last day
        maybe Strings/doubles for world state
        party object to store which party is the player's


    Two constructors:
        A default for new game:
            Enter primary character name (also sets as save file name)
            Creates a new player party and a character.

        A full constructor for loading a game
        Loads game class and recreates other objects that were in the game
        (consider making a constructor assister?):
            Maybe it accepts a Scanner at the location of the save file as a parameter
            then loads party which then loads each character



    methods:
        start method starts the game:
            After all the loading is complete, the game starts playing

        nextDay increases daysPassed by one:
            daysPassed++;

        A method(s) that controls the menus:
            There are many menus so there might be many different menu methods.
            Includes helper methods for the menus

        end game saves all the data (including other object's instance variables):
            endGame wraps everything up and uses the debug method below to
            format what gets written into Saves.txt

        print entire game state (player party, and game instance variables)
        can also be used to format what's saved into Saves.txt:
            Utilizes the print statements from character and party class.
            Same print as party except file name and world info are on top
            of the print statements.

PROJECTILE CLASS //created by the character class
    Instance variables:
        character object for who created the projectile
        (is there a way to make it read-only so the projectile
        can't modify the character object?)
        double for damage done

    One constructor:
        Receives a character and double as a parameter
        to construct the object

CHARACTER CLASS
    Instance variables:
        String for character name
        Three int instance variables:
            strength, speed and endurance
        double variable for health
        boolean for capable of fighting
        boolean for alive/dead
        //characters have the possibility of being alive but incapacitated

    Three constructors:
        A single string for new game player character
        A single double for tavern recruits (the multiplier for stats)
        a constructor for loading characters (includes all instance variables)

    methods:
        Method(s) to generate a random character:
            Should be able to accept a double in order to scale their stats

        A method that handles giving an attack:
            creates an attack loosely based on health, and strength stats
            A projectile object is made containing all the required info.
            Allows for flexibility since an attack can affect multiple characters

        Another that handles getting attacked:
            receives a projectile as a parameter. Endurance modifies the
            true damage received.

        Get/set all three stats & health:
            simple getters and setters

        A method that KILLS a character:
            isAlive = false;
            character can never get revived

        prints info about character (name, stats and health):
            Two different print methods. One for basic info (name and health)
            and another for detailed info (name, stats, and health)

        prints info (for save file):
            Prints character info in a format that follows the save file




PARTY CLASS
    Instance variables:
        Character arraylist capped at 3
        int instance variables for gold

    Three constructors:
        Constructor with one Character as a parameter (when creating new game)
        A constructor for loading game (takes a scanner as a parameter)
        A constructor that takes a string that creates a
        random enemy party

    methods:
        A way to check gold, add gold and to lose gold:
            changeGold accepts either an int and adds that
            to the gold instance variable

        Accessing party members:
            getMember accepts an int and returns a character object

        Setting one party to attack another until completion:
            Combat between characters but in the scale of a party.
            Turns are taken and order is decided by a character's speed.
            Targets are randomly selected

        print info (displays characters info and gold):
            Two different types. One for "Main Menu" where it shows
            the name and health of every member and gold. Then a second
            detail print where it shows each member's full list of attributes

        prints info (for save file formatting):
            prints each character's save file formatting, each on a new line.
            Then prints gold as well